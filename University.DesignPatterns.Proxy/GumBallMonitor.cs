namespace University.DesignPatterns.Proxy
{
    /// <summary>
    /// Задача: Необходимо реализовать систему мониторинга автоматов для продажи жевательно резинки
    /// Необходимо получить отчёт о наличии шариков и состоянии автомата. У автомата
    /// есть методы GetCount и GetState. Добавим поле с описанием о местонахождении автомата
    /// С доступом к автомату могут возникнуть проблемы
    /// Паттерн заместитель предоставляет суррогатный объект, управляющий доступом
    /// к другому объекту. Можно выделить следующие варианты заместителей:
    /// 1) Удалённый заместитель, управляет доступом к удалённому объекту, при этом заместитель
    /// выполняет функции локального представителя объекта. Вызов метода заместителя передаётся
    /// по сети, а результат возвращается заместителю, а от него клиенту
    /// 2) виртуальный заместитель, управляет доступом к ресурсу, создание которого
    /// требует больших затрат. Создание объекта производится до момента его непосредественного использования.
    /// 3) защитный заместитель, контролирует доступ к ресурсу с соответствием привелегий.
    /// Реализация общего интерфейса ISubject позволяет использовать прокси вместо RealSubject
    /// </summary>
    public class GumBallMonitor
    {
        // private GumBullMachineNew _machine;
        public GumBallMonitor(/*GumBullMachineNew*/)
        {
            
        }
    }
}
